#include <iostream>
#include <queue>

using namespace std;
typedef struct
{
	int now, result;
}kiki;
int n, k;
int result = 0;
bool visited[100001];
int bfs(int s)
{
	queue<kiki> Q;
	kiki fst; fst.now = s; fst.result = 0;
	Q.push(fst);
	while (!Q.empty())
	{
		kiki temp = Q.front();
//		cout << temp.now << ' ' << temp.result << endl;
		if (temp.now == k)
		{
//			cout << "end" << endl;
			return temp.result;
		}
		visited[temp.now] = true;
//		cout << temp.now << "visited" << endl;
		Q.pop();
		if (temp.now - 1 >= 0)
		{
			if (!visited[temp.now - 1])
			{
				kiki ttemp; ttemp.now = temp.now - 1; ttemp.result = temp.result + 1;
				Q.push(ttemp);
//				cout << ttemp.now << "push" << endl;
			}
		}
		if (temp.now + 1 <= 100000)
		{
			if (!visited[temp.now + 1])
			{
				kiki ttemp; ttemp.now = temp.now + 1; ttemp.result = temp.result + 1;
				Q.push(ttemp);
//				cout << ttemp.now << "push" << endl;
			}
		}
		if (2 * temp.now <= 100000)
		{
			if (!visited[2 * temp.now])
			{
				kiki ttemp; ttemp.now = temp.now * 2; ttemp.result = temp.result + 1;
				Q.push(ttemp);
//				cout << ttemp.now << "push" << endl;
			}
		}
	}
}

int main()
{
	cin >> n >> k;
	cout << bfs(n) << endl;
	return 0;
}
